# This is for the Firebeetle 2 ESP32-C6 with the Waveshare 2.9" black and white ePaper.

substitutions:
  device_name: "firebeetle2"
  friendly_name: "Firebeetle2 ESP32-C6 2.9in ePaper"
  sleep_duration: 10min # Was 60min
  wake_duration: 30s # Will stay awake less than this, since device put to sleep once screen is updated
  screen_update_duration: 5s

logger:
  level: INFO # Set logging level (DEBUG for verbose output)
  baud_rate: 115200  # Set the baud rate for logging output
  # Send logs to Home Assistant, because the device is asleep most of the time
  on_message:
    level: WARN
    then:
      - text_sensor.template.publish:
          id: log_message_for_HA
          state: !lambda |-
            char buffer[256];
            snprintf(buffer, sizeof(buffer), "[%s] %s", tag, message);
            return std::string(buffer);

external_components:
  - source:
      type: git
      url: https://github.com/lboue/esphome
      ref: adc_oneshot
    components: [ adc ]
    refresh: 0s # Do not update automatically

esphome:
  name: ${device_name}

  includes:
    - includes/text_utils.h  # Include the text utilities

  # Boot runs on startup and on wake from deep sleep
  # Sequence: start up, get data, update screen, go back to sleep. Completes in 7 seconds.
  on_boot:
    priority: -100.0 # # -100 waits till boot of everything else is finished
    then:
      - output.turn_on: internal_led
      - logger.log: "Booted, waiting until sensors updated."
      - script.execute: update_screen # Display "Awaiting data..." while we get data
      - delay: ${screen_update_duration} # Wait for screen refresh
      - wait_until:
          condition:
            and:
              - wifi.connected
              - api.connected
              - time.has_time
              - lambda: 'return id(data_updated) == true;'
          timeout: 30s
      - if:
          condition:
            lambda: 'return id(data_updated) == true;'
          then:
            - logger.log:
                format: "Boot: data updated successfully."
                level: INFO
          else:
            - logger.log:
                format: "Boot: timed out waiting for data update."
                level: WARN
      - lambda: |-
          // Once the time is available, calculate and publish the boot time
          auto boot_time = id(homeassistant_time).now().timestamp - (int) id(${device_name}_uptime_seconds).state;
          id(${device_name}_last_boot_time).publish_state(boot_time);
      - script.execute: update_screen # Now update the screen to show the data received
      - delay: ${screen_update_duration} # Wait for screen refresh
      - if:
          condition:
            binary_sensor.is_on: enable_deep_sleep
          then:
            - output.turn_off: internal_led
            - if:
                condition:
                  lambda: 'return id(homeassistant_time).now().hour == 23;'
                then:
                  - logger.log: "Sleeping until 6 am"
                  - deep_sleep.enter:
                      id: deep_sleep_control
                      until: "6:00:00"
                      time_id: homeassistant_time
                else:
                  - logger.log: "Sleeping for ${sleep_duration}"
                  - deep_sleep.enter:
                      id: deep_sleep_control
                      sleep_duration: ${sleep_duration}         
          else:
            - logger.log: "Sleep disabled, staying awake"
            - deep_sleep.prevent: deep_sleep_control

safe_mode:
  boot_is_good_after: 3s  # Reduce the time to consider boot successful
  num_attempts: 5  # Number of failed boot attempts before entering safe mode
  reboot_timeout: 1min  # Duration to remain in safe mode before rebooting
  on_safe_mode:
    then:
      - logger.log: "Entering safe mode due to repeated boot failures"

esp32:
  board: esp32-c6-devkitc-1
  flash_size: 4MB
  variant: esp32c6
  framework:
    type: esp-idf
    version: "5.3.1"
    platform_version: 6.9.0
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE_4MB: y

# Define deep sleep settings. Sleep cycles begin automatically unless prevented.
deep_sleep:
  id: deep_sleep_control
  run_duration: ${wake_duration} # This setting overridden by the time-based sleep/boot cycle.
  sleep_duration: ${sleep_duration}

# Enable Home Assistant API
api:
  encryption:
    key: !secret firebeetle2_api_encryption_key

ota:
  platform: esphome
  password: !secret firebeetle2_ota_password

button:
  - platform: safe_mode
    name: "${device_name} Safe Mode: only logging, wifi and OTA"
  - platform: shutdown
    name: "${device_name} Shutdown"
  - platform: restart
    name: "${device_name} Restart"
  - platform: template
    name: "${device_name} Refresh Screen"
    entity_category: config
    on_press:
      - script.execute: update_screen

captive_portal:

binary_sensor:
  # Import the input_boolean helper entity from Home Assistant
  - platform: homeassistant
    id: enable_deep_sleep
    entity_id: input_boolean.firebeetle_enable_sleep

  - platform: status
    name: ${friendly_name} Status 

# Global variables for detecting if the display needs to be refreshed. (Thanks @paviro!)
globals:
  - id: data_updated
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: recorded_display_refresh
    type: int
    restore_value: yes
    initial_value: '0'
  - id: bitcoin_price_formatted
    type: std::string
    restore_value: no
    initial_value: '""'

text_sensor:
  - platform: template
    name: "${device_name} Log"
    id: log_message_for_HA
    entity_category: diagnostic

script:
  - id: update_screen
    mode: queued
    then:
      - logger.log: "Executing update_screen script"
      - lambda: 'id(data_updated) = false;'
      - component.update: adam_epaper1
      - lambda: |-
          id(recorded_display_refresh) += 1;
          id(display_refreshes).publish_state(id(recorded_display_refresh));
          id(display_last_update).publish_state(id(homeassistant_time).now().timestamp);
      - logger.log: "Screen updated and refresh count published"

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: GMT0BST,M3.5.0/1,M10.5.0
    update_interval: 60min
    on_time_sync:
      - then:
          - logger.log: Time set
    on_time:
      # Update screen every X minutes >> superseded by sleep cycle and boot that updates screen.
      # Device won't stay awake long enough for a time-based refresh to occur.
      # But leave here in case I disable sleep and want to see display refresh.
      - seconds: 0
        minutes: /1
        then:
          - script.execute: update_screen

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

sensor:
  - platform: homeassistant
    name: "${device_name} Bitcoin Current Price from HA"
    entity_id: sensor.trump_current_price # Changed from sensor.bitcoin_current_price
    # id: bitcoin_current_price
    id: bitcoin_current_price
    on_value:
      then:
        # Format as $xxx,xxx (no decimal places)
        - lambda: |- 
            float price = id(bitcoin_current_price).state;
            int price_int = static_cast<int>(price);
            char price_str[15];
            snprintf(price_str, sizeof(price_str), "%d", price_int);
            std::string price_formatted = price_str;
            int insert_position = price_formatted.length() - 3;
            while (insert_position > 0) {
              price_formatted.insert(insert_position, ",");
              insert_position -= 3;
            }
            id(bitcoin_price_formatted) = price_formatted;
            
            // Only this data matters enough to flag for screen update
            id(data_updated) = true;

  - platform: homeassistant
    name: "${device_name} Received Bitcoin All Time High"
    entity_id: sensor.bitcoin_all_time_high
    id: bitcoin_all_time_high

  # Battery voltage
  - platform: adc
    name: "${friendly_name} Battery Voltage"
    id: batt_voltage
    pin: GPIO0
    accuracy_decimals: 2
    update_interval: 60min
    filters:
      - multiply: 2.0
    on_value:
      then:
        - component.update: batt_percentage

  - platform: template
    name: "${friendly_name} Battery"
    id: batt_percentage
    unit_of_measurement: "%"
    accuracy_decimals: 0
    update_interval: 60min
    device_class: battery
    lambda: |- # New algo for battery percentage
      float voltage = id(batt_voltage).state;

      int percentage;
      if (voltage >= 4.15) {
        percentage = 100;
      } else if (voltage > 3.5) {
        percentage = (voltage - 3.5) * 153.846; // Linear approximation between 3.5V and 4.15V
      } else if (voltage > 3.3) {
        percentage = (voltage - 3.3) * 50; // Linear approximation between 3.3V and 3.5V
      } else {
        percentage = 0;
      }
      return percentage;

  - platform: template
    name: "${device_name} Display Last Update"
    device_class: timestamp
    entity_category: "diagnostic"
    id: display_last_update

  - platform: template
    name: "${device_name} Display Refreshes"
    id: display_refreshes
    accuracy_decimals: 0
    unit_of_measurement: "Refreshes"
    state_class: "total_increasing"
    entity_category: "diagnostic"
    update_interval: 60min
    lambda: |-
      return id(recorded_display_refresh);

  - platform: wifi_signal
    name: "${device_name} WiFi Signal Strength"
    id: wifisignal
    unit_of_measurement: "dBm"
    entity_category: "diagnostic"
    update_interval: 60min

  # Define Last Boot Sensor (calculation occurs once at boot)
  - platform: uptime
    id: ${device_name}_uptime_seconds
    name: "Uptime Seconds"
    internal: true

  - platform: template
    name: "Last Boot"
    id: ${device_name}_last_boot_time
    device_class: timestamp
    entity_category: diagnostic
    accuracy_decimals: 0
    update_interval: never # No regular update needed

# Bitcoin B for background
image:
  - file: "images/BitcoinB-2-9inch.png"
    id: b_of_bitcoin
    type: BINARY

# Enable HTTP Request component
http_request:
  useragent: esphome/1.0

font:
  - file:
      type: gfonts
      family: Montserrat
      weight: 700
    size: 30
    id: font_title
    extras: # Add dollar symbol $
      - file: "gfonts://Montserrat"
        glyphs: [$]

  - file:
      type: gfonts
      family: Montserrat
      weight: 400
    size: 30
    id: font_subtitle
    extras: # Add dollar symbol $
      - file: "gfonts://Montserrat"
        glyphs: [$]

  - file:
      type: gfonts
      family: Montserrat
      weight: 400
    size: 14
    id: font_footer

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi
    size: 16
    glyphs:
      # WiFi
      - "\U000F0928" # mdi-wifi-strength-4
      - "\U000F0925" # mdi-wifi-strength-3 
      - "\U000F0922" # mdi-wifi-strength-2
      - "\U000F091F" # mdi-wifi-strength-1
      - "\U000F092B" # mdi-wifi-strength-alert-outline (very weak)
      - "\U000F0450" # mdi-refresh
      # Battery
      - "\U000F0079" # mdi-battery-100
      - "\U000F007A" # mdi-battery-10
      - "\U000F007B" # mdi-battery-20
      - "\U000F007C" # mdi-battery-30
      - "\U000F007D" # mdi-battery-40
      - "\U000F007E" # mdi-battery-50
      - "\U000F007F" # mdi-battery-60
      - "\U000F0080" # mdi-battery-70
      - "\U000F0081" # mdi-battery-80
      - "\U000F0082" # mdi-battery-90
      - "\U000F125E" # mdi-battery-slashed

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_big
    size: 20
    glyphs:
      # All time high icon
      - "\U000F04CE" # star

color:
  - id: colour_white
    hex: "000000"
  - id: colour_black
    hex: "FFFFFF"

spi:
  clk_pin: 4
  mosi_pin: 6

output:
  - platform: gpio
    pin: GPIO15
    id: internal_led

display:
  - platform: waveshare_epaper
    model: 2.90inV2
    cs_pin: 7
    dc_pin: 1
    busy_pin: 3
    reset_pin: 2
    reset_duration: 2ms
    rotation: 270
    full_update_every: 1
    update_interval: never
    id: adam_epaper1
    lambda: |-
      ESP_LOGI("display", ">>> DISPLAY UPDATE <<<");

      // Set margin
      int blanking_margin = 5;

      if (isnan(id(bitcoin_current_price).state) && !isnan(id(display_refreshes).state)) {
        it.printf(it.get_width() / 2, (it.get_height() / 2) - (30 / 2), id(font_subtitle), id(colour_black), TextAlign::CENTER, "Awaiting data...");
        it.printf(it.get_width() / 2, (it.get_height() / 2) + (14 / 2) + 10, id(font_footer), id(colour_black), TextAlign::CENTER, "Refreshes: %d", (int)id(display_refreshes).state);
      }
      else {

        ////////////////////////////////////
        // Draw B of the Bitcoin image as background
        it.image(0, 0, id(b_of_bitcoin), id(colour_black), id(colour_white));

        ////////////////////////////////////
        // Draw Bitcoin price
        
        // Format Bitcoin price
        char price_str[50];
        snprintf(price_str, sizeof(price_str), "Trump: $%s", id(bitcoin_price_formatted).c_str());

        // Draw blanking rectangle behind Bitcoin price
        int pricetext_width = GetTextWidth(&it, id(font_subtitle), "%s", price_str);
        int price_blanking_x = (it.get_width() / 2) - (pricetext_width / 2) - blanking_margin;
        int price_blanking_y = (it.get_height() / 2) - 10 - 15 - blanking_margin; // 15 is half the font size 30
        int width = pricetext_width + (2 * blanking_margin);
        int height = 30 + (2 * blanking_margin); // 30 is the font size
        
        it.filled_rectangle(price_blanking_x, price_blanking_y, width, height, id(colour_white));

        // Draw main text with formatted price
        ESP_LOGD("bitcoin_current_price", "Displaying bitcoin price: $%.0f", id(bitcoin_current_price).state);
        ESP_LOGD("bitcoin_current_price", "Formatted Bitcoin price: %s", id(bitcoin_price_formatted).c_str());
        it.printf(it.get_width() / 2, (it.get_height() / 2) - 10, id(font_subtitle), id(colour_black), TextAlign::CENTER, price_str);
    
        ///////////////////////////////////
        // System status, (last updated time, wifi signal strength, battery status)
        // Width maths is: display width minus wifi icon minus refresh icon minus text width 
        // Show last updated date and time
        it.strftime(it.get_width()-18, it.get_height()-36, id(font_footer), id(colour_black), TextAlign::TOP_RIGHT, "%d%b%y %H:%M", id(homeassistant_time).now());
        // "Refresh" icon
        it.print(it.get_width()-18-95, it.get_height()-36+2, id(font_mdi), id(colour_black), TextAlign::TOP_RIGHT, "\U000F0450");
        
        // Draw WiFi signal strength
        if(id(wifisignal).has_state()) {
          const char* wifi_icon = "\U000F092B";

          if (id(wifisignal).state >= -50) {
              wifi_icon = "\U000F0928";  // Excellent
          } else if (id(wifisignal).state >= -60) {
              wifi_icon = "\U000F0925";  // Good
          } else if (id(wifisignal).state >= -75) {
              wifi_icon = "\U000F0922";  // Fair
          } else if (id(wifisignal).state >= -90) {
              wifi_icon = "\U000F091F";  // Weak
          }

          it.print(it.get_width(), it.get_height()-36, id(font_mdi), id(colour_black), TextAlign::TOP_RIGHT, wifi_icon);
        }

        if (id(batt_voltage).has_state() && id(batt_percentage).has_state()) {
          // Draw battery icon
          const char* battery_icon = "\U000F125E";  // Default to "Battery slashed" icon
          
          if (id(batt_percentage).state >= 95) {
              battery_icon = "\U000F0079";  // Battery 100
          } else if (id(batt_percentage).state >= 90) {
              battery_icon = "\U000F0082";  // Battery 90
          } else if (id(batt_percentage).state >= 80) {
              battery_icon = "\U000F0081";  // Battery 80
          } else if (id(batt_percentage).state >= 70) {
              battery_icon = "\U000F0080";  // Battery 70
          } else if (id(batt_percentage).state >= 60) {
              battery_icon = "\U000F007F";  // Battery 60
          } else if (id(batt_percentage).state >= 50) {
              battery_icon = "\U000F007E";  // Battery 50
          } else if (id(batt_percentage).state >= 40) {
              battery_icon = "\U000F007D";  // Battery 40
          } else if (id(batt_percentage).state >= 30) {
              battery_icon = "\U000F007C";  // Battery 30
          } else if (id(batt_percentage).state >= 20) {
              battery_icon = "\U000F007B";  // Battery 20
          } else if (id(batt_percentage).state >= 10) {
              battery_icon = "\U000F007A";  // Battery 10
          }

          // Draw battery status text
          it.print(it.get_width(), it.get_height()-18+1, id(font_mdi), id(colour_black), TextAlign::TOP_RIGHT, battery_icon);
          if (id(batt_percentage).has_state()) {
            it.printf(it.get_width()-18, it.get_height()-18, id(font_footer),  id(colour_black), TextAlign::TOP_RIGHT, "%.0f%%", id(batt_percentage).state);
          }

          // Log battery status
          ESP_LOGI("battery_status", "Battery percentage: %.1f%%", id(batt_percentage).state);
          ESP_LOGI("battery_status", "Battery voltage: %.2fV", id(batt_voltage).state);
        }
      }