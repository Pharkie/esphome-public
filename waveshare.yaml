substitutions:
  device_name: waveshare

logger:
  level: INFO  # Set logging level (DEBUG for verbose output)
  baud_rate: 115200  # Set the baud rate for logging output

esphome:
  name: ${device_name}

  includes:
    - includes/text_utils.h  # Include the text utilities

  on_boot:
      priority: 200.0
      then:
        - component.update: bitcoin_graph # Update the Bitcoin graph on boot
        - component.update: adam_epaper1
        - wait_until:
            condition:
              lambda: 'return id(data_updated) == true;'
              # Wait a bit longer so all the items are received
        - delay: 5s
        - logger.log: "Initial sensor data received: Refreshing display..."
        - lambda: 'id(initial_data_received) = true;'
        - script.execute: update_screen
  
external_components: # Add the MAX17048 battery monitor library
  - source: github://Option-Zero/esphome-components@max17048
    components: [max17048]

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    version: "5.3.1"
    platform_version: 6.9.0

# Enable Home Assistant API
api:
  encryption:
    key: !secret waveshare_api_encryption_key

ota:
  platform: esphome
  password: !secret waveshare_ota_password

button:
  - platform: shutdown
    name: "${device_name} Shutdown Device"
  - platform: restart
    name: "${device_name} Restart Device"
  - platform: template
    name: "${device_name} Refresh Screen"
    entity_category: config
    on_press:
      - script.execute: update_screen
  - platform: template
    name: "${device_name} Refresh Bitcoin Graph"
    entity_category: config
    on_press:
      - component.update: bitcoin_graph
      - component.update: adam_epaper1

# Global variables for detecting if the display needs to be refreshed. (Thanks @paviro!)
globals:
  - id: data_updated
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: initial_data_received
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: recorded_display_refresh
    type: int
    restore_value: yes
    initial_value: '0'
  - id: bitcoin_price_formatted
    type: std::string
    restore_value: no
    initial_value: '""'

# Script for updating screen - Refresh display and publish refresh count and time. (Thanks @paviro!)
script:
  - id: update_screen
    then:
      - logger.log: "Executing update_screen script"
      - lambda: 'id(data_updated) = false;'
      - component.update: adam_epaper1
      - lambda: 'id(recorded_display_refresh) += 1;'
      - lambda: 'id(display_last_update).publish_state(id(homeassistant_time).now().timestamp);'
      - logger.log: "Screen updated and refresh count published"
      
# Check whether the display needs to be refreshed, once per hour
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      # Refresh the screen on the hour every hour
      - seconds: 0
        minutes: 0
        then:
          - script.execute: update_screen
          # - if:
          #     condition:
          #       lambda: 'return id(data_updated) == true;'
          #     then:
          #       - logger.log: "Sensor data updated: refreshing display..."
          #       - script.execute: update_screen
          #     else:
          #       - logger.log: "No sensors updated - skipping display refresh."
      # Redownload the Bitcoin graph at 5.10am each day
      - seconds: 0
        minutes: 10
        hours: 5
        then:
          - component.update: bitcoin_graph

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  on_connect:
    - logger.log: "WiFi connected, updating bitcoin graph..."
    - component.update: bitcoin_graph

# Add the sensors from Home Assistant
sensor:
  - platform: homeassistant
    name: "${device_name} Received Bitcoin Current Price"
    entity_id: sensor.bitcoin_current_price
    id: bitcoin_current_price
    on_value:
      then:
        - lambda: |-
            id(data_updated) = true;
            float price = id(bitcoin_current_price).state;
            char price_str[10];
            snprintf(price_str, sizeof(price_str), "%.2f", price);
            std::string price_formatted = price_str;
            int insert_position = price_formatted.find('.') - 3;
            while (insert_position > 0) {
              price_formatted.insert(insert_position, ",");
              insert_position -= 3;
            }
            id(bitcoin_price_formatted) = price_formatted;

  - platform: homeassistant
    name: "${device_name} Received Bitcoin All Time High"
    entity_id: sensor.bitcoin_all_time_high
    id: bitcoin_all_time_high

  # Create sensors for monitoring device remotely.
  - platform: template
    name: "${device_name} Display Last Update"
    device_class: timestamp
    entity_category: "diagnostic"
    id: display_last_update
    
  - platform: template
    name: "${device_name} Display Refreshes"
    id: display_refreshes
    accuracy_decimals: 0
    unit_of_measurement: "Refreshes"
    state_class: "total_increasing"
    entity_category: "diagnostic"
    update_interval: 60min  # Updates sent to HA once per hour
    lambda: |-
      return id(recorded_display_refresh);   
  
  - platform: wifi_signal
    name: "${device_name} WiFi Signal Strength"
    id: wifisignal
    unit_of_measurement: "dBm"
    entity_category: "diagnostic"
    update_interval: 60min

  - platform: max17048
    battery_voltage:
      name: Battery voltage
      id: batt_v
    battery_level:
      name: Battery level
      id: batt_pct
    rate:
      name: Battery discharge rate
      id: batt_discharge_rate

# Bitcoin B for background
image:
  - file: "images/BitcoinB-v6.png"
    id: b_of_bitcoin
    type: BINARY

# Enable HTTP Request component
http_request:
  useragent: esphome/1.0  # Set a custom user agent

online_image:
  - id: bitcoin_graph
    url: "http://homeassistant.local:8123/local/bitcoin_graph.png"
    format: png
    update_interval: never  # No automatic interval updates. Updates on boot + time trigger, above.

font:
  - file:
      type: gfonts
      family: Montserrat
      weight: 700
    size: 30
    id: font_title
    extras: # Add dollar symbol $
      - file: "gfonts://Montserrat"
        glyphs: [$]

  - file:
      type: gfonts
      family: Montserrat
      weight: 400
    size: 30
    id: font_subtitle
    extras: # Add dollar symbol $
      - file: "gfonts://Montserrat"
        glyphs: [$]

  - file:
      type: gfonts
      family: Montserrat
      weight: 400
    size: 14
    id: font_footer

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi
    size: 16
    glyphs:
      # WiFi
      - "\U000F0928" # mdi-wifi-strength-4
      - "\U000F0925" # mdi-wifi-strength-3 
      - "\U000F0922" # mdi-wifi-strength-2
      - "\U000F091F" # mdi-wifi-strength-1
      - "\U000F092B" # mdi-wifi-strength-alert-outline (very weak)
      - "\U000F0450" # mdi-refresh
      # Battery
      - "\U000F0079" # mdi-battery-100
      - "\U000F007A" # mdi-battery-10
      - "\U000F007B" # mdi-battery-20
      - "\U000F007C" # mdi-battery-30
      - "\U000F007D" # mdi-battery-40
      - "\U000F007E" # mdi-battery-50
      - "\U000F007F" # mdi-battery-60
      - "\U000F0080" # mdi-battery-70
      - "\U000F0081" # mdi-battery-80
      - "\U000F0082" # mdi-battery-90
      - "\U000F125E" # mdi-battery-slashed

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_big
    size: 20
    glyphs:
      # All time high icon
      - "\U000F04CE" # star

# Define colors
# These look the wrong way around but it's because HA works on both LCD and ePaper displays.
# On the ePaper display, white means no colour (000000). Black means max colour (FFFFFF).
# See https://github.com/esphome/issues/issues/3132
color:
  - id: colour_white
    red: 0%
    green: 0%
    blue: 0%
    white: 0%
  - id: colour_black
    red: 0%
    green: 0%
    blue: 0%
    white: 100%

# I2C configuration for MAX17048
i2c:
  sda: GPIO21
  scl: GPIO22
  scan: true
  id: bus_a

# Pins for Waveshare ePaper ESP Board
spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14

display:
  - platform: waveshare_epaper
    model: 7.50inV2alt
    cs_pin: GPIO15
    dc_pin: GPIO27
    busy_pin: 
      number: GPIO25
      inverted: true
    reset_pin: GPIO26
    reset_duration: 2ms
    rotation: 0
    update_interval: never
    id: adam_epaper1
    lambda: |-
      ESP_LOGI("display", ">>> DISPLAY UPDATE <<<");
      it.fill(id(colour_white)); // Clear the screen with the background color
      if (isnan(id(bitcoin_current_price).state)) {
        ////////////////////////////////////
        // Draw "Awaiting data..." message
        it.printf(it.get_width() / 2, it.get_height()/2, id(font_title), id(colour_black), TextAlign::BASELINE_CENTER, "Awaiting data...");
      }
      else {
        ////////////////////////////////////
        // Draw Bitcoin graph
        ESP_LOGD("display", "Writing Bitcoin graph");
        if (id(bitcoin_graph) != nullptr) {
          ESP_LOGD("display", "Displaying Bitcoin graph image.");
          // Colours fix inverted image: https://github.com/esphome/feature-requests/issues/1463
          it.image(75, 55, id(bitcoin_graph), colour_white, colour_black);
        } else {
          ESP_LOGD("display", "Bitcoin graph image not ready.");
        }

        ////////////////////////////////////
        // Draw B of the Bitcoin image as background
        it.image(60, 35, id(b_of_bitcoin), id(colour_black), id(colour_white));

        ////////////////////////////////////
        // Today's date and Bitcoin price

        // Set margin
        int blanking_margin = 10;

        // Manually format the date without leading zeros
        auto datetimenow = id(homeassistant_time).now();
        char date_str[30];
        snprintf(date_str, sizeof(date_str), "%d %s %d", datetimenow.day_of_month, datetimenow.strftime("%B").c_str(), datetimenow.year);

        // Calculate text width for date
        int datetext_width = GetTextWidth(&it, id(font_title), "%s", date_str);
        
        // Draw blanking rectangle behind today's date
        it.filled_rectangle((it.get_width() / 2)-(datetext_width / 2) - blanking_margin, 50, datetext_width + (2 * blanking_margin), 40, id(colour_white));

        // Print the date
        it.printf(it.get_width() / 2, 50, id(font_title), id(colour_black), TextAlign::TOP_CENTER, date_str);

        // Format Bitcoin price
        char price_str[50];
        snprintf(price_str, sizeof(price_str), "Bitcoin price: $%s", id(bitcoin_price_formatted).c_str());

        // Calculate text width for Bitcoin price
        int pricetext_width = GetTextWidth(&it, id(font_subtitle), "%s", price_str);

        // Draw blanking rectangle behind Bitcoin price
        it.filled_rectangle((it.get_width() / 2)-(pricetext_width / 2) - blanking_margin, 100, pricetext_width + (2 * blanking_margin), 40, id(colour_white));

        // Draw text of formatted Bitcoin price
        ESP_LOGD("bitcoin_price", "Displaying bitcoin price: $%.2f", id(bitcoin_current_price).state);
        ESP_LOGD("bitcoin_price", "Formatted Bitcoin price: %s", id(bitcoin_price_formatted).c_str());
        it.printf(it.get_width() / 2, 100, id(font_subtitle), id(colour_black), TextAlign::TOP_CENTER, price_str);

        ////////////////////////////////////
        // Bitcoin All Time High
        // Log the All Time High and current price
        ESP_LOGD("bitcoin_price", "Current Bitcoin all time high: $%.2f", id(bitcoin_all_time_high).state);
        ESP_LOGD("bitcoin_price", "Current Bitcoin price: $%.2f", id(bitcoin_current_price).state);
        // Show the all time high if it's higher than the current price
        if (id(bitcoin_current_price).state > id(bitcoin_all_time_high).state) {
          ESP_LOGI("bitcoin_price", "Bitcoin is at new all time high: draw that to display");

          // Format ATH text
          char ath_str[30];
          snprintf(ath_str, sizeof(ath_str), "  New all time high  "); // Add spaces so blanking rectangle covers " *", each side

          // Calculate text width for ATH
          int athtext_width = GetTextWidth(&it, id(font_subtitle), "%s", ath_str);

          // Draw blanking rectangle behind "New all time high" text
          it.filled_rectangle((it.get_width() / 2)-(athtext_width / 2) - blanking_margin, 150, athtext_width + (2 * blanking_margin), 40, id(colour_white));

          it.print(it.get_width() / 2 - 150, 160, id(font_mdi_big), id(colour_black), TextAlign::TOP_CENTER, "\U000F04CE");
          it.printf(it.get_width() / 2, 150, id(font_subtitle), id(colour_black), TextAlign::TOP_CENTER, ath_str);
          it.print(it.get_width() / 2 + 150, 160, id(font_mdi_big), id(colour_black), TextAlign::TOP_CENTER, "\U000F04CE");
        }
        else {
          ESP_LOGD("bitcoin_price", "Bitcoin not at new all time high, skipping display of that");
        }

        ///////////////////////////////////
        // System status, top right (last updated time, wifi signal strength, battery status)
        // Show last updated time (date is shown in middle of display)
        // Width maths is: display width minus wifi icon minus refresh icon minus text width (minus frame border?)
        it.print(it.get_width()-18-40-60, 40+3, id(font_mdi), id(colour_black), TextAlign::TOP_RIGHT, "\U000F0450");  // Refresh icon
        it.strftime(it.get_width()-18-60, 40, id(font_footer), id(colour_black), TextAlign::TOP_RIGHT, "%H:%M", id(homeassistant_time).now());
        
        // Draw WiFi signal strength
        if(id(wifisignal).has_state()) {
          const char* wifi_icon = "\U000F092B";

          if (id(wifisignal).state >= -50) {
              wifi_icon = "\U000F0928";  // Excellent
          } else if (id(wifisignal).state >= -60) {
              wifi_icon = "\U000F0925";  // Good
          } else if (id(wifisignal).state >= -75) {
              wifi_icon = "\U000F0922";  // Fair
          } else if (id(wifisignal).state >= -90) {
              wifi_icon = "\U000F091F";  // Weak
          }

          it.print(it.get_width()-60, 41, id(font_mdi), id(colour_black), TextAlign::TOP_RIGHT, wifi_icon);
        }

        if (id(batt_pct).has_state()) {
          // Draw battery icon
          const char* battery_icon = "\U000F125E";  // Default to "Battery slashed" icon
          
          if (id(batt_pct).state >= 95) {
              battery_icon = "\U000F0079";  // Battery 100
          } else if (id(batt_pct).state >= 90) {
              battery_icon = "\U000F0082";  // Battery 90
          } else if (id(batt_pct).state >= 80) {
              battery_icon = "\U000F0081";  // Battery 80
          } else if (id(batt_pct).state >= 70) {
              battery_icon = "\U000F0080";  // Battery 70
          } else if (id(batt_pct).state >= 60) {
              battery_icon = "\U000F007F";  // Battery 60
          } else if (id(batt_pct).state >= 50) {
              battery_icon = "\U000F007E";  // Battery 50
          } else if (id(batt_pct).state >= 40) {
              battery_icon = "\U000F007D";  // Battery 40
          } else if (id(batt_pct).state >= 30) {
              battery_icon = "\U000F007C";  // Battery 30
          } else if (id(batt_pct).state >= 20) {
              battery_icon = "\U000F007B";  // Battery 20
          } else if (id(batt_pct).state >= 10) {
              battery_icon = "\U000F007A";  // Battery 10
          }

          // Draw battery status text
          it.print(it.get_width()-60, 60+3, id(font_mdi), id(colour_black), TextAlign::TOP_RIGHT, battery_icon);
          if (id(batt_pct).has_state()) {
            it.printf(it.get_width()-18-60, 60, id(font_footer),  id(colour_black), TextAlign::TOP_RIGHT, "%.0f%%", id(batt_pct).state);
          }

          // Log battery status
          ESP_LOGI("battery_status", "Battery percentage: %.1f%%", id(batt_pct).state);
          ESP_LOGI("battery_status", "Battery voltage: %.2fV", id(batt_v).state);
          ESP_LOGI("battery_status", "Battery discharge rate: %.0f%%/hr", id(batt_discharge_rate).state);
        }
      }